openapi: 3.0.3
info:
  title: Dimes CAD API
  description: |-
    This is the Node.js API layer for the Dimes CAD application, providing functionalities for creating,
    modifying, and exporting 3D models. This API acts as a secure gateway between the frontend
    and the C++ OpenCascade backend, handling authentication, validation, and protocol translation.
    It also includes endpoints for AI-driven operations through the Daydreams AI framework.
  version: 1.0.0
servers:
  - url: http://localhost:3000/api/v1
    description: Node.js API Server (Development)
  - url: https://api.dimes-cad.com/api/v1
    description: Production API Server
tags:
  - name: Health
    description: API Health Check and Backend Status
  - name: CAD Models
    description: Operations related to 3D models
  - name: CAD Operations
    description: Geometric and boolean operations
  - name: CAD Export
    description: Exporting models to different formats
  - name: CAD AI
    description: AI-powered CAD operations via Daydreams
  - name: Backend
    description: C++ Backend status and monitoring
components:
  schemas:
    Vector3d:
      type: object
      properties:
        x:
          type: number
          format: double
          description: X-coordinate
        y:
          type: number
          format: double
          description: Y-coordinate
        z:
          type: number
          format: double
          description: Z-coordinate
      required:
        - x
        - y
        - z
    BoxParameters:
      type: object
      properties:
        width:
          type: number
          format: double
          description: Width of the box.
        height:
          type: number
          format: double
          description: Height of the box.
        depth:
          type: number
          format: double
          description: Depth of the box.
        position:
          $ref: '#/components/schemas/Vector3d'
    CylinderParameters:
      type: object
      properties:
        radius:
          type: number
          format: double
          description: Radius of the cylinder.
        height:
          type: number
          format: double
          description: Height of the cylinder.
        position:
          $ref: '#/components/schemas/Vector3d'
    SphereParameters:
      type: object
      properties:
        radius:
          type: number
          format: double
          description: Radius of the sphere.
        position:
          $ref: '#/components/schemas/Vector3d'
    Primitive:
      type: object
      properties:
        type:
          type: string
          enum: [box, cylinder, sphere]
          description: The type of primitive to create.
        parameters:
          oneOf:
            - $ref: '#/components/schemas/BoxParameters'
            - $ref: '#/components/schemas/CylinderParameters'
            - $ref: '#/components/schemas/SphereParameters'
      discriminator:
        propertyName: type
        mapping:
          box: '#/components/schemas/BoxParameters'
          cylinder: '#/components/schemas/CylinderParameters'
          sphere: '#/components/schemas/SphereParameters'
    MeshData:
      type: object
      properties:
        vertices:
          type: array
          items:
            type: number
            format: float
        faces:
          type: array
          items:
            type: integer
        metadata:
          type: object
          properties:
            vertex_count:
              type: integer
            face_count:
              type: integer
            tessellation_quality:
              type: number
              format: double
    BoundingBox:
      type: object
      properties:
        min:
          $ref: '#/components/schemas/Vector3d'
        max:
          $ref: '#/components/schemas/Vector3d'
    Model:
      type: object
      properties:
        model_id:
          type: string
          description: The unique identifier for the model.
        mesh_data:
          $ref: '#/components/schemas/MeshData'
        bounding_box:
          $ref: '#/components/schemas/BoundingBox'
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          description: A message describing the error.
        timestamp:
          type: integer
          format: int64
          description: The timestamp of when the error occurred.
  securitySchemes:
    SessionID:
      type: apiKey
      in: header
      name: X-Session-ID
security:
  - SessionID: []
paths:
  /health:
    get:
      tags:
        - Health
      summary: Check API Health
      description: Returns the health status of the Node.js API server and C++ backend.
      operationId: getHealth
      responses:
        '200':
          description: Successful response with health status.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  service:
                    type: string
                    example: Dimes CAD API Server
                  version:
                    type: string
                    example: 1.0.0
                  timestamp:
                    type: integer
                    format: int64
                  uptime:
                    type: number
                    description: Server uptime in seconds
                  memory:
                    type: object
                    description: Memory usage statistics
                  environment:
                    type: string
                    example: development
                  backend:
                    type: object
                    properties:
                      status:
                        type: string
                        enum: [healthy, unhealthy, unknown]
                      health:
                        type: object
                        description: C++ backend health data
                      url:
                        type: string
                        description: C++ backend URL
                  performance:
                    type: object
                    properties:
                      response_time_ms:
                        type: number
        '503':
          description: Service unavailable (backend unhealthy).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cad/models:
    post:
      tags:
        - CAD Models
      summary: Create a new 3D model
      description: Creates a new primitive 3D model (e.g., box, cylinder, sphere) via the C++ backend.
      operationId: createModel
      requestBody:
        description: Parameters for creating the new model.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                parameters:
                  $ref: '#/components/schemas/Primitive'
      responses:
        '200':
          description: The model was created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  session_id:
                    type: string
                  timestamp:
                    type: integer
                    format: int64
                  data:
                    $ref: '#/components/schemas/Model'
        '400':
          description: Invalid request body or validation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '503':
          description: C++ backend unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cad/operations:
    post:
      tags:
        - CAD Operations
      summary: Perform a boolean operation
      description: Performs a boolean operation (union, cut, intersect) between two models via the C++ backend.
      operationId: performBooleanOperation
      requestBody:
        description: Parameters for the boolean operation.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                operation_type:
                  type: string
                  enum: [union, cut, intersect]
                  description: The type of boolean operation to perform.
                target_id:
                  type: string
                  description: The ID of the target model.
                tool_id:
                  type: string
                  description: The ID of the tool model.
      responses:
        '200':
          description: The boolean operation was successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result_id:
                    type: string
                    description: The ID of the resulting model.
                  mesh_data:
                    $ref: '#/components/schemas/MeshData'
        '400':
          description: Invalid request parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cad/tessellate:
    post:
      tags:
        - CAD Models
      summary: Tessellate a model
      description: Generates a mesh representation of a model for visualization via the C++ backend.
      operationId: tessellateModel
      requestBody:
        description: Parameters for tessellation.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                model_id:
                  type: string
                  description: The ID of the model to tessellate.
                tessellation_quality:
                  type: number
                  format: double
                  description: The quality of the tessellation (e.g., 0.1 for high quality).
                  default: 0.1
      responses:
        '200':
          description: Tessellation was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeshData'
        '400':
          description: Invalid request parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Model not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cad/sessions/{sessionId}/export/{format}:
    get:
      tags:
        - CAD Export
      summary: Export a model
      description: Exports a model to a specified format (e.g., STEP, STL) via the C++ backend.
      operationId: exportModel
      parameters:
        - name: sessionId
          in: path
          required: true
          description: The ID of the session.
          schema:
            type: string
        - name: format
          in: path
          required: true
          description: The format to export the model to.
          schema:
            type: string
            enum: [step, stp, stl]
      responses:
        '200':
          description: The model was exported successfully.
          content:
            application/step:
              schema:
                type: string
                format: binary
            application/vnd.ms-pki.stl:
              schema:
                type: string
                format: binary
        '404':
          description: Session or model not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cad/daydreams:
    post:
      tags:
        - CAD AI
      summary: AI-powered CAD operation
      description: Executes a CAD operation based on a natural language instruction via the Daydreams AI framework and C++ backend.
      operationId: daydreamsCad
      requestBody:
        description: The instruction for the AI.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                instruction:
                  type: string
                  description: The natural language instruction for the CAD operation.
                sessionId:
                  type: string
                  description: The ID of the session.
      responses:
        '200':
          description: The AI operation was completed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  model_data:
                    type: object
        '400':
          description: Invalid instruction.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cad/parameters:
    put:
      tags:
        - CAD Models
      summary: Update model parameters
      description: Updates parameters of existing models via the C++ backend.
      operationId: updateParameters
      requestBody:
        description: Parameters to update.
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: number
              example:
                width: 15.0
                height: 20.0
      responses:
        '200':
          description: Parameters updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  session_id:
                    type: string
                  timestamp:
                    type: integer
                    format: int64
                  data:
                    type: object
        '400':
          description: Invalid parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '503':
          description: C++ backend unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cad/backend/status:
    get:
      tags:
        - Backend
      summary: Check C++ backend status
      description: Returns the status and health of the C++ OpenCascade backend.
      operationId: getBackendStatus
      responses:
        '200':
          description: Backend is available and healthy.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  backend_status:
                    type: string
                    enum: [available, unavailable]
                  backend_health:
                    type: object
                    description: Health data from C++ backend
                  timestamp:
                    type: integer
                    format: int64
        '503':
          description: Backend is unavailable.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  backend_status:
                    type: string
                    example: unavailable
                  error:
                    type: string
                  timestamp:
                    type: integer
                    format: int64
  /health/ready:
    get:
      tags:
        - Health
      summary: Readiness probe
      description: Checks if the service is ready to accept traffic (including backend availability).
      operationId: getReadiness
      responses:
        '200':
          description: Service is ready.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ready
                  timestamp:
                    type: integer
                    format: int64
                  backend_ready:
                    type: boolean
        '503':
          description: Service is not ready.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: not_ready
                  timestamp:
                    type: integer
                    format: int64
                  backend_ready:
                    type: boolean
                  message:
                    type: string
  /health/live:
    get:
      tags:
        - Health
      summary: Liveness probe
      description: Checks if the service is alive (basic health check).
      operationId: getLiveness
      responses:
        '200':
          description: Service is alive.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: alive
                  timestamp:
                    type: integer
                    format: int64
                  uptime:
                    type: number