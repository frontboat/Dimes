---
description: Development Workflow & Deployment Guidelines
globs: 
alwaysApply: false
---
# Development Workflow & Deployment Guidelines

## üöÄ Development Environment Setup

### Prerequisites Installation
Ensure all platform dependencies are installed per [README.md](mdc:README.md):
- **Windows**: Visual Studio Build Tools 2022, OpenCASCADE, CMake
- **Linux**: build-essential, libocct-dev packages, CMake  
- **macOS**: Xcode tools, Homebrew dependencies

### Repository Setup
```bash
git clone <repository-url>
cd Dimes

# Install client dependencies
cd client && npm install && cd ..

# Verify server build environment
cd server && mkdir -p build && cd build
cmake .. && cd ../..
```

## üîß Development Workflow

### 1. **Server Development** (C++ OCCT Backend)

#### Daily Development
```bash
cd server/build

# Incremental build (fast)
cmake --build . --config Release

# Clean rebuild (when CMakeLists.txt changes)
rm -rf * && cmake .. && cmake --build . --config Release
```

#### Adding New Features
1. **Header First**: Add declarations to appropriate `include/` files
2. **Implementation**: Add implementation to corresponding `src/` files  
3. **CMake Integration**: Update [CMakeLists.txt](mdc:server/CMakeLists.txt) if adding new files
4. **Testing**: Test through REST API endpoints

#### Key Files to Modify
- **API Endpoints**: [cad_controller.cpp](mdc:server/src/api/cad_controller.cpp)
- **OCCT Operations**: [occt_engine.cpp](mdc:server/src/geometry/occt_engine.cpp)
- **Session Logic**: [session_manager.cpp](mdc:server/src/session/session_manager.cpp)

### 2. **Client Development** (TypeScript Three.js Frontend)

#### Daily Development
```bash
cd client

# Start development server with hot reload
npm run dev

# Type checking (in separate terminal)
npm run type-check

# Linting and formatting
npm run lint
```

#### Adding New Features
1. **Types First**: Add TypeScript definitions to `types/`
2. **Implementation**: Add components to appropriate directories
3. **Integration**: Update [main.ts](mdc:client/src/main.ts) for new features
4. **Testing**: Test in browser at `http://localhost:5173`

#### Key Files to Modify
- **API Communication**: [cad-client.ts](mdc:client/src/api/cad-client.ts)
- **3D Rendering**: [cad-renderer.ts](mdc:client/src/renderer/cad-renderer.ts)
- **User Controls**: [cad-controls.ts](mdc:client/src/controls/cad-controls.ts)
- **Application Logic**: [main.ts](mdc:client/src/main.ts)

## üîÑ Testing Workflow

### Server Testing
```bash
# 1. Build and start server
cd server/build && ./cad-server  # Linux/Mac
# or
cd server/build/Release && ./cad-engine-server.exe  # Windows

# 2. Test health endpoint
curl http://localhost:8080/api/v1/health

# 3. Test model creation
curl -X POST http://localhost:8080/api/v1/models \
  -H "Content-Type: application/json" \
  -d '{
    "session_id": "test-session",
    "operation": "create_model",
    "parameters": {
      "type": "primitive",
      "primitive_type": "box",
      "dimensions": {"width": 10, "height": 10, "depth": 10}
    }
  }'
```

### Client Testing
```bash
cd client

# Start dev server
npm run dev

# Open browser to http://localhost:5173
# Verify:
# ‚úÖ Green status bar: "CAD Engine ready! üéâ"  
# ‚úÖ 3D viewport with grid and axes
# ‚úÖ Demo geometry loads
# ‚úÖ Camera controls work (mouse orbit/pan/zoom)
# ‚úÖ Keyboard shortcuts (Ctrl+1/2/3/0)
```

### Integration Testing
1. **Start both server and client**
2. **Verify connection**: Status bar shows "Server connection successful"
3. **Test real-time updates**: Geometry changes reflect immediately
4. **Test error handling**: Stop server, verify graceful degradation

## üèóÔ∏è Build Process

### Development Builds

#### Server Development Build
```bash
cd server/build
cmake .. -DCMAKE_BUILD_TYPE=Debug
cmake --build . --config Debug

# Run with debug info
./Debug/cad-server --verbose  # Windows
# or
./cad-server --verbose  # Linux/Mac
```

#### Client Development Build
```bash
cd client
npm run dev  # Development server with hot reload
```

### Production Builds

#### Server Production Build
```bash
cd server/build
cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="-O3 -DNDEBUG"
cmake --build . --config Release

# Create distribution package
mkdir -p dist/server
cp Release/cad-engine-server.exe dist/server/  # Windows
# or
cp cad-server dist/server/  # Linux/Mac

# Include required DLLs (Windows)
cp "$OCCT_DIR/bin/*.dll" dist/server/  # OCCT libraries
cp "$TBB_DIR/bin/tbb12.dll" dist/server/  # Intel TBB
```

#### Client Production Build
```bash
cd client

# Build optimized bundle
npm run build

# Output in dist/ directory
ls dist/  # index.html, assets/index.js, assets/index.css

# Serve production build locally (testing)
npm run preview
```

## üîß Debugging

### Server Debugging

#### C++ Debugging (Visual Studio)
```bash
# Windows: Open in Visual Studio
cd server
code . # or open CMake project in VS

# Set breakpoints in:
# - cad_controller.cpp (API endpoints)
# - occt_engine.cpp (geometry operations)
# - session_manager.cpp (session logic)
```

#### Console Debugging
```bash
# Enable verbose logging
./cad-server --verbose --log-level=debug

# Check OCCT initialization
grep "OCCT Engine initialized" logs/
```

### Client Debugging

#### Browser DevTools
```javascript
// Enable debug logging in browser console
localStorage.setItem('debug', 'cad:*')

// Check connection status
console.log('CAD Client status:', window.cadClient?.getStatus())

// Monitor WebSocket messages
window.cadClient?.onMessage((msg) => console.log('WS:', msg))
```

#### TypeScript Debugging
```bash
# Source maps enabled in development
npm run dev

# Type checking
npm run type-check

# Lint checking  
npm run lint
```

## üì¶ Dependency Management

### Server Dependencies (C++)
- **OpenCASCADE**: System-installed, detected by CMake
- **cpp-httplib**: Header-only, included in `include/httplib.h`
- **JSON**: Custom implementation in `include/json/json.h`

#### Adding New C++ Dependencies
1. **Header-only**: Add to `server/include/`
2. **System libraries**: Add `find_package()` to [CMakeLists.txt](mdc:server/CMakeLists.txt)
3. **Compiled libraries**: Add build instructions to [README.md](mdc:README.md)

### Client Dependencies (Node.js)
- **Three.js**: 3D rendering engine
- **TypeScript**: Type-safe development
- **Vite**: Build tool and dev server

#### Adding New NPM Dependencies
```bash
cd client

# Production dependency
npm install package-name

# Development dependency  
npm install --save-dev package-name

# Update types
npm install --save-dev @types/package-name
```

## üöÄ Deployment

### Local Deployment
```bash
# Terminal 1: Server
cd server/build/Release && ./cad-engine-server.exe

# Terminal 2: Client  
cd client && npm run preview  # Serves production build

# Access: http://localhost:4173 (production) or :5173 (dev)
```

### Production Deployment
1. **Server**: Deploy binary + required DLLs to server environment
2. **Client**: Deploy built assets to web server (nginx, Apache, CDN)
3. **Configuration**: Update API endpoints for production URLs
4. **SSL**: Enable HTTPS for production deployments

### Docker Deployment (Future)
```dockerfile
# Multi-stage build for server + client
# TODO: Create Dockerfile for containerized deployment
```

## üîç Troubleshooting

### Common Issues

#### "OCCT libraries not found"
```bash
# Windows: Ensure OpenCASCADE installer completed
# Linux: sudo apt install libocct-*-dev
# macOS: brew install opencascade
```

#### "Server offline - running in demo mode"
```bash
# Check server is running on port 8080
netstat -an | grep 8080
curl http://localhost:8080/api/v1/health
```

#### TypeScript Compilation Errors
```bash
cd client
npm run type-check  # Check for type errors
npm install  # Reinstall dependencies
```

This workflow ensures efficient development while maintaining code quality and production readiness.

