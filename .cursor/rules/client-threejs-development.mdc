---
description: Client-Side Three.js Development Guidelines
globs: 
alwaysApply: false
---
# Client-Side Three.js Development Guidelines

## ðŸŽ¯ Frontend Architecture

The Three.js client provides professional 3D CAD visualization with real-time server integration.

### Core Components
- **CADRenderer** ([cad-renderer.ts](mdc:client/src/renderer/cad-renderer.ts)): Three.js scene management
- **CADControls** ([cad-controls.ts](mdc:client/src/controls/cad-controls.ts)): Camera and viewport controls  
- **CADClient** ([cad-client.ts](mdc:client/src/api/cad-client.ts)): Server communication
- **MeshManager** ([mesh-manager.ts](mdc:client/src/mesh/mesh-manager.ts)): Geometry processing

## ðŸŽ¨ CADRenderer Guidelines

### Scene Setup
```typescript
// In cad-renderer.ts
export class CADRenderer {
    private scene: THREE.Scene;
    private camera: THREE.PerspectiveCamera;
    private renderer: THREE.WebGLRenderer;
    private grid: THREE.GridHelper;
    private axes: THREE.AxesHelper;

    constructor(container: HTMLElement) {
        this.initializeScene();
        this.setupLighting();
        this.createVisualAids();
        this.setupRenderer(container);
    }

    private initializeScene(): void {
        this.scene = new THREE.Scene();
        this.scene.background = new THREE.Color(0xf0f0f0);

        // Professional CAD camera setup
        this.camera = new THREE.PerspectiveCamera(
            45,  // FOV
            window.innerWidth / window.innerHeight,  // Aspect
            0.1,  // Near
            10000  // Far - large for CAD scenes
        );
    }
}
```

### Professional Lighting
```typescript
private setupLighting(): void {
    // Ambient light for overall illumination
    const ambientLight = new THREE.AmbientLight(0x404040, 0.4);
    this.scene.add(ambientLight);

    // Main directional light
    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
    directionalLight.position.set(50, 50, 50);
    directionalLight.castShadow = true;
    directionalLight.shadow.mapSize.width = 2048;
    directionalLight.shadow.mapSize.height = 2048;
    this.scene.add(directionalLight);

    // Fill light to reduce harsh shadows
    const fillLight = new THREE.DirectionalLight(0xffffff, 0.3);
    fillLight.position.set(-50, -50, 50);
    this.scene.add(fillLight);

    // Hemisphere light for realistic ambient
    const hemisphereLight = new THREE.HemisphereLight(0x87CEEB, 0x2F4F4F, 0.2);
    this.scene.add(hemisphereLight);
}
```

### Visual Aids (Grid, Axes)
```typescript
private createVisualAids(): void {
    // Professional grid with minor/major lines
    this.grid = new THREE.GridHelper(
        100,   // Size
        100,   // Divisions
        0x444444,  // Center line color
        0x888888   // Grid color
    );
    this.grid.rotateX(Math.PI / 2);  // Horizontal grid
    this.scene.add(this.grid);

    // Color-coded axes (Red=X, Green=Y, Blue=Z)
    this.axes = new THREE.AxesHelper(20);
    this.scene.add(this.axes);
}
```

### Material Standards
```typescript
// Professional CAD materials
export const CAD_MATERIALS = {
    default: new THREE.MeshPhongMaterial({
        color: 0x606060,
        shininess: 30,
        transparent: false
    }),
    
    selected: new THREE.MeshPhongMaterial({
        color: 0xff6600,
        shininess: 50,
        transparent: false
    }),
    
    wireframe: new THREE.MeshBasicMaterial({
        color: 0x000000,
        wireframe: true,
        transparent: true,
        opacity: 0.3
    }),
    
    transparent: new THREE.MeshPhongMaterial({
        color: 0x6060ff,
        transparent: true,
        opacity: 0.7
    })
};
```

## ðŸŽ® CADControls Implementation

### Camera Controls Setup
```typescript
// In cad-controls.ts
export class CADControls {
    private controls: OrbitControls;
    private camera: THREE.PerspectiveCamera;

    constructor(camera: THREE.PerspectiveCamera, domElement: HTMLElement) {
        this.camera = camera;
        this.setupControls(domElement);
        this.setupKeyboardShortcuts();
    }

    private setupControls(domElement: HTMLElement): void {
        this.controls = new OrbitControls(this.camera, domElement);
        
        // Professional CAD settings
        this.controls.enableDamping = true;
        this.controls.dampingFactor = 0.05;
        this.controls.screenSpacePanning = false;
        this.controls.maxPolarAngle = Math.PI;
        
        // Smooth zoom
        this.controls.enableZoom = true;
        this.controls.zoomSpeed = 1.0;
        
        // Pan settings  
        this.controls.enablePan = true;
        this.controls.panSpeed = 1.0;
        this.controls.keyPanSpeed = 7.0;
        
        // Rotation settings
        this.controls.enableRotate = true;
        this.controls.rotateSpeed = 1.0;
    }
}
```

### View Presets
```typescript
// Professional CAD view presets
public setViewPreset(view: 'front' | 'top' | 'right' | 'isometric'): void {
    const distance = 100;
    let position: THREE.Vector3;
    
    switch (view) {
        case 'front':
            position = new THREE.Vector3(0, 0, distance);
            break;
        case 'top':
            position = new THREE.Vector3(0, distance, 0);
            break;
        case 'right':
            position = new THREE.Vector3(distance, 0, 0);
            break;
        case 'isometric':
            position = new THREE.Vector3(distance, distance, distance);
            break;
    }
    
    // Smooth camera transition
    this.animateCamera(position, new THREE.Vector3(0, 0, 0));
}

private animateCamera(targetPosition: THREE.Vector3, targetLookAt: THREE.Vector3): void {
    const startPosition = this.camera.position.clone();
    const startLookAt = this.controls.target.clone();
    
    const duration = 1000; // ms
    const startTime = Date.now();
    
    const animate = () => {
        const elapsed = Date.now() - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        // Smooth easing function
        const eased = 1 - Math.pow(1 - progress, 3);
        
        this.camera.position.lerpVectors(startPosition, targetPosition, eased);
        this.controls.target.lerpVectors(startLookAt, targetLookAt, eased);
        this.controls.update();
        
        if (progress < 1) {
            requestAnimationFrame(animate);
        }
    };
    
    animate();
}
```

### Keyboard Shortcuts
```typescript
private setupKeyboardShortcuts(): void {
    document.addEventListener('keydown', (event) => {
        if (event.ctrlKey) {
            switch (event.key) {
                case '1':
                    event.preventDefault();
                    this.setViewPreset('front');
                    break;
                case '2':
                    event.preventDefault();
                    this.setViewPreset('top');
                    break;
                case '3':
                    event.preventDefault();
                    this.setViewPreset('right');
                    break;
                case '0':
                    event.preventDefault();
                    this.setViewPreset('isometric');
                    break;
            }
        }
    });
}
```

## ðŸ”— CADClient Server Integration

### API Communication
```typescript
// In cad-client.ts
export class CADClient {
    private baseUrl: string;
    private sessionId: string | null = null;
    private websocket: WebSocket | null = null;

    constructor(baseUrl: string = 'http://localhost:8080') {
        this.baseUrl = baseUrl;
    }

    // RESTful API calls
    async createModel(parameters: CreateModelRequest): Promise<ModelResponse> {
        const response = await this.makeRequest('POST', '/api/v1/models', {
            session_id: this.sessionId,
            ...parameters
        });
        
        return response.json();
    }

    async updateModel(modelId: string, parameters: UpdateModelRequest): Promise<ModelResponse> {
        const response = await this.makeRequest('PUT', `/api/v1/models/${modelId}`, {
            session_id: this.sessionId,
            ...parameters
        });
        
        return response.json();
    }

    private async makeRequest(method: string, endpoint: string, data?: any): Promise<Response> {
        const url = `${this.baseUrl}${endpoint}`;
        const options: RequestInit = {
            method,
            headers: {
                'Content-Type': 'application/json',
            },
        };

        if (data) {
            options.body = JSON.stringify(data);
        }

        const response = await fetch(url, options);
        
        if (!response.ok) {
            throw new Error(`API request failed: ${response.status} ${response.statusText}`);
        }
        
        return response;
    }
}
```

### WebSocket Integration
```typescript
// Real-time geometry updates
public connectWebSocket(): void {
    if (this.websocket) {
        this.websocket.close();
    }

    const wsUrl = this.baseUrl.replace('http', 'ws') + '/ws';
    this.websocket = new WebSocket(wsUrl);

    this.websocket.onopen = () => {
        console.log('WebSocket connected');
        if (this.sessionId) {
            this.websocket?.send(JSON.stringify({
                type: 'join_session',
                session_id: this.sessionId
            }));
        }
    };

    this.websocket.onmessage = (event) => {
        const message = JSON.parse(event.data);
        this.handleWebSocketMessage(message);
    };

    this.websocket.onerror = (error) => {
        console.error('WebSocket error:', error);
    };
}

private handleWebSocketMessage(message: any): void {
    switch (message.type) {
        case 'geometry_update':
            this.onGeometryUpdate?.(message.data);
            break;
        case 'parameter_change':
            this.onParameterChange?.(message.data);
            break;
    }
}
```

## ðŸŽ¯ MeshManager Guidelines

### Geometry Processing
```typescript
// In mesh-manager.ts
export class MeshManager {
    private scene: THREE.Scene;
    private meshes: Map<string, THREE.Mesh> = new Map();

    constructor(scene: THREE.Scene) {
        this.scene = scene;
    }

    // Create Three.js mesh from server data
    public createMeshFromData(modelId: string, meshData: MeshData): THREE.Mesh {
        const geometry = new THREE.BufferGeometry();
        
        // Set vertex positions
        const positions = new Float32Array(meshData.vertices);
        geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
        
        // Set triangle indices
        const indices = new Uint32Array(meshData.faces);
        geometry.setIndex(new THREE.BufferAttribute(indices, 1));
        
        // Set vertex normals
        if (meshData.normals) {
            const normals = new Float32Array(meshData.normals);
            geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));
        } else {
            geometry.computeVertexNormals();
        }
        
        // Create mesh with professional material
        const material = CAD_MATERIALS.default.clone();
        const mesh = new THREE.Mesh(geometry, material);
        mesh.name = modelId;
        
        // Add to scene and tracking
        this.scene.add(mesh);
        this.meshes.set(modelId, mesh);
        
        return mesh;
    }

    // Update existing mesh
    public updateMesh(modelId: string, meshData: MeshData): void {
        const mesh = this.meshes.get(modelId);
        if (!mesh) return;

        const geometry = mesh.geometry as THREE.BufferGeometry;
        
        // Update vertex positions
        const positionAttribute = geometry.getAttribute('position');
        if (positionAttribute) {
            const positions = new Float32Array(meshData.vertices);
            positionAttribute.array = positions;
            positionAttribute.needsUpdate = true;
        }
        
        // Update normals
        if (meshData.normals) {
            const normalAttribute = geometry.getAttribute('normal');
            if (normalAttribute) {
                const normals = new Float32Array(meshData.normals);
                normalAttribute.array = normals;
                normalAttribute.needsUpdate = true;
            }
        } else {
            geometry.computeVertexNormals();
        }
        
        geometry.computeBoundingBox();
        geometry.computeBoundingSphere();
    }
}
```

## ðŸš€ Performance Optimization

### Rendering Optimization
```typescript
// Efficient rendering loop
private animate(): void {
    requestAnimationFrame(() => this.animate());
    
    // Update controls
    this.controls.update();
    
    // Frustum culling (automatic)
    // LOD management (if needed)
    this.updateLOD();
    
    // Render scene
    this.renderer.render(this.scene, this.camera);
}

private updateLOD(): void {
    // Implement Level of Detail based on camera distance
    this.meshes.forEach((mesh, modelId) => {
        const distance = this.camera.position.distanceTo(mesh.position);
        
        // Switch to wireframe for distant objects
        if (distance > 500) {
            mesh.material = CAD_MATERIALS.wireframe;
        } else {
            mesh.material = CAD_MATERIALS.default;
        }
    });
}
```

### Memory Management
```typescript
// Clean up resources
public dispose(): void {
    // Dispose geometries
    this.meshes.forEach((mesh) => {
        mesh.geometry.dispose();
        if (Array.isArray(mesh.material)) {
            mesh.material.forEach(material => material.dispose());
        } else {
            mesh.material.dispose();
        }
        this.scene.remove(mesh);
    });
    
    this.meshes.clear();
    
    // Dispose renderer
    this.renderer.dispose();
    
    // Dispose controls
    this.controls.dispose();
}
```

## ðŸ”§ TypeScript Integration

### Type Definitions
```typescript
// In types/cad-types.ts
export interface MeshData {
    vertices: number[];
    faces: number[];
    normals?: number[];
}

export interface ModelResponse {
    model_id: string;
    status: string;
    geometry: {
        bounding_box: {
            min: { x: number; y: number; z: number };
            max: { x: number; y: number; z: number };
        };
        volume: number;
        surface_area: number;
    };
    mesh_data?: MeshData;
}

export interface CreateModelRequest {
    operation: string;
    parameters: {
        type: string;
        primitive_type?: string;
        dimensions?: { [key: string]: number };
        position?: { x: number; y: number; z: number };
    };
}
```

### Component Integration
```typescript
// In main.ts - Application orchestrator
export class CADApplication {
    private renderer: CADRenderer;
    private controls: CADControls;
    private client: CADClient;
    private meshManager: MeshManager;

    constructor(container: HTMLElement) {
        this.initializeComponents(container);
        this.setupEventHandlers();
        this.connectToServer();
    }

    private initializeComponents(container: HTMLElement): void {
        this.renderer = new CADRenderer(container);
        this.controls = new CADControls(this.renderer.getCamera(), container);
        this.client = new CADClient();
        this.meshManager = new MeshManager(this.renderer.getScene());
    }

    private setupEventHandlers(): void {
        // Handle server geometry updates
        this.client.onGeometryUpdate = (data) => {
            this.meshManager.updateMesh(data.model_id, data.mesh_data);
        };
        
        // Handle user interactions
        this.setupUIEventHandlers();
    }
}
```

This structure provides a professional, maintainable Three.js frontend that integrates seamlessly with the OCCT backend while following modern TypeScript development practices.

