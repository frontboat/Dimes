---
description: Server-Side OCCT Development Guidelines
globs: 
alwaysApply: false
---
# Server-Side OCCT Development Guidelines

## üéØ OCCT Architecture Overview

The server backend leverages OpenCASCADE Technology (OCCT) for professional CAD operations with modern C++ patterns.

### Core Components
- **OCCTEngine** ([occt_engine.h](mdc:server/include/geometry/occt_engine.h)): Geometric operations
- **CADController** ([cad_controller.h](mdc:server/include/api/cad_controller.h)): HTTP API server
- **SessionManager** ([session_manager.h](mdc:server/include/session/session_manager.h)): Multi-user sessions
- **TessellationEngine** ([tessellation_engine.h](mdc:server/include/tessellation/tessellation_engine.h)): Mesh generation

## üõ†Ô∏è OCCT Engine Implementation

### Core Geometry Operations
```cpp
// In occt_engine.h
class OCCTEngine {
private:
    static OCCTEngine* instance;
    bool initialized;
    
    // Core OCCT objects
    Handle(V3d_Viewer) viewer;
    Handle(AIS_InteractiveContext) context;
    
    // Geometry tracking
    std::map<std::string, TopoDS_Shape> shapes;
    std::map<std::string, Handle(AIS_Shape)> presentations;

public:
    static OCCTEngine& getInstance();
    
    // Lifecycle management
    bool initialize();
    void cleanup();
    
    // Primitive creation
    std::string createBox(double width, double height, double depth, 
                         const gp_Pnt& position = gp_Pnt(0, 0, 0));
    std::string createCylinder(double radius, double height,
                              const gp_Pnt& position = gp_Pnt(0, 0, 0));
    std::string createSphere(double radius,
                            const gp_Pnt& position = gp_Pnt(0, 0, 0));
    std::string createCone(double bottomRadius, double topRadius, double height,
                          const gp_Pnt& position = gp_Pnt(0, 0, 0));
    
    // Boolean operations
    std::string performUnion(const std::string& shape1, const std::string& shape2);
    std::string performCut(const std::string& shape1, const std::string& shape2);
    std::string performIntersection(const std::string& shape1, const std::string& shape2);
    
    // Transformations
    bool translateShape(const std::string& shapeId, const gp_Vec& translation);
    bool rotateShape(const std::string& shapeId, const gp_Ax1& axis, double angle);
    bool scaleShape(const std::string& shapeId, const gp_Pnt& center, double factor);
    
    // Analysis
    double getVolume(const std::string& shapeId);
    double getSurfaceArea(const std::string& shapeId);
    Bnd_Box getBoundingBox(const std::string& shapeId);
    
    // Export operations
    bool exportSTEP(const std::string& shapeId, const std::string& filename);
    bool exportSTL(const std::string& shapeId, const std::string& filename);
    bool exportOBJ(const std::string& shapeId, const std::string& filename);
    bool exportIGES(const std::string& shapeId, const std::string& filename);
    
    // Shape management
    bool hasShape(const std::string& shapeId) const;
    bool removeShape(const std::string& shapeId);
    void clearAllShapes();
    
    // Utility
    std::string generateShapeId() const;
};
```

### Implementation Patterns
```cpp
// In occt_engine.cpp
std::string OCCTEngine::createBox(double width, double height, double depth, const gp_Pnt& position) {
    try {
        // Create box using OCCT primitives
        BRepPrimAPI_MakeBox boxMaker(width, height, depth);
        boxMaker.Build();
        
        if (!boxMaker.IsDone()) {
            throw std::runtime_error("Failed to create box geometry");
        }
        
        TopoDS_Shape box = boxMaker.Shape();
        
        // Apply position transformation
        if (position.Distance(gp_Pnt(0, 0, 0)) > Precision::Confusion()) {
            gp_Trsf transformation;
            transformation.SetTranslation(gp_Vec(gp_Pnt(0, 0, 0), position));
            
            TopLoc_Location location(transformation);
            box.Location(location);
        }
        
        // Generate unique ID and store
        std::string shapeId = generateShapeId();
        shapes[shapeId] = box;
        
        // Create AIS presentation for visualization
        Handle(AIS_Shape) aisShape = new AIS_Shape(box);
        aisShape->SetColor(Quantity_NOC_GRAY);
        aisShape->SetMaterial(Graphic3d_MaterialAspect(Graphic3d_NOM_PLASTIC));
        presentations[shapeId] = aisShape;
        
        return shapeId;
        
    } catch (const Standard_Failure& e) {
        throw std::runtime_error("OCCT error in createBox: " + std::string(e.GetMessageString()));
    }
}
```

### Boolean Operations
```cpp
std::string OCCTEngine::performUnion(const std::string& shape1, const std::string& shape2) {
    try {
        if (!hasShape(shape1) || !hasShape(shape2)) {
            throw std::invalid_argument("One or both shapes not found");
        }
        
        const TopoDS_Shape& s1 = shapes[shape1];
        const TopoDS_Shape& s2 = shapes[shape2];
        
        // Perform boolean union using BRepAlgoAPI
        BRepAlgoAPI_Fuse fuseOp(s1, s2);
        fuseOp.Build();
        
        if (!fuseOp.IsDone()) {
            throw std::runtime_error("Boolean union operation failed");
        }
        
        TopoDS_Shape result = fuseOp.Shape();
        
        // Simplify result
        ShapeUpgrade_UnifySameDomain unifier(result);
        unifier.Build();
        if (unifier.IsDone()) {
            result = unifier.Shape();
        }
        
        // Store result
        std::string resultId = generateShapeId();
        shapes[resultId] = result;
        
        // Create AIS presentation
        Handle(AIS_Shape) aisShape = new AIS_Shape(result);
        aisShape->SetColor(Quantity_NOC_GREEN);
        presentations[resultId] = aisShape;
        
        return resultId;
        
    } catch (const Standard_Failure& e) {
        throw std::runtime_error("OCCT error in performUnion: " + std::string(e.GetMessageString()));
    }
}
```

## üé® Tessellation Engine

### High-Quality Mesh Generation
```cpp
// In tessellation_engine.h
class TessellationEngine {
private:
    double linearDeflection;
    double angularDeflection;
    bool relativeTessellation;

public:
    explicit TessellationEngine(double linearDefl = 0.1, double angularDefl = 0.1);
    
    struct MeshData {
        std::vector<float> vertices;
        std::vector<uint32_t> faces;
        std::vector<float> normals;
        size_t vertexCount;
        size_t faceCount;
    };
    
    // Tessellation operations
    MeshData tessellateShape(const TopoDS_Shape& shape, double quality = 0.1);
    bool setQuality(double linearDeflection, double angularDeflection);
    void setRelativeMode(bool relative);
    
private:
    void processTriangulation(const Handle(Poly_Triangulation)& triangulation,
                             MeshData& meshData,
                             const TopLoc_Location& location);
    gp_Vec calculateNormal(const gp_Pnt& p1, const gp_Pnt& p2, const gp_Pnt& p3);
};
```

### Implementation
```cpp
// In tessellation_engine.cpp
TessellationEngine::MeshData TessellationEngine::tessellateShape(const TopoDS_Shape& shape, double quality) {
    MeshData meshData;
    
    try {
        // Set tessellation parameters based on quality
        double linDefl = linearDeflection * quality;
        double angDefl = angularDeflection * quality;
        
        // Perform incremental mesh
        BRepMesh_IncrementalMesh meshGen(shape, linDefl, relativeTessellation, angDefl);
        
        if (!meshGen.IsDone()) {
            throw std::runtime_error("Mesh generation failed");
        }
        
        // Extract triangulation from faces
        for (TopExp_Explorer explorer(shape, TopAbs_FACE); explorer.More(); explorer.Next()) {
            const TopoDS_Face& face = TopoDS::Face(explorer.Current());
            TopLoc_Location location;
            
            Handle(Poly_Triangulation) triangulation = BRep_Tool::Triangulation(face, location);
            
            if (!triangulation.IsNull()) {
                processTriangulation(triangulation, meshData, location);
            }
        }
        
        meshData.vertexCount = meshData.vertices.size() / 3;
        meshData.faceCount = meshData.faces.size() / 3;
        
        return meshData;
        
    } catch (const Standard_Failure& e) {
        throw std::runtime_error("OCCT tessellation error: " + std::string(e.GetMessageString()));
    }
}

void TessellationEngine::processTriangulation(const Handle(Poly_Triangulation)& triangulation,
                                            MeshData& meshData,
                                            const TopLoc_Location& location) {
    if (triangulation.IsNull()) return;
    
    const TColgp_Array1OfPnt& nodes = triangulation->Nodes();
    const Poly_Array1OfTriangle& triangles = triangulation->Triangles();
    
    // Transform for location
    gp_Trsf transformation = location.Transformation();
    
    // Extract vertices
    size_t baseIndex = meshData.vertices.size() / 3;
    for (int i = 1; i <= nodes.Length(); i++) {
        gp_Pnt point = nodes(i);
        point.Transform(transformation);
        
        meshData.vertices.push_back(static_cast<float>(point.X()));
        meshData.vertices.push_back(static_cast<float>(point.Y()));
        meshData.vertices.push_back(static_cast<float>(point.Z()));
    }
    
    // Extract triangles and compute normals
    for (int i = 1; i <= triangles.Length(); i++) {
        int n1, n2, n3;
        triangles(i).Get(n1, n2, n3);
        
        // Adjust indices for base offset
        meshData.faces.push_back(static_cast<uint32_t>(baseIndex + n1 - 1));
        meshData.faces.push_back(static_cast<uint32_t>(baseIndex + n2 - 1));
        meshData.faces.push_back(static_cast<uint32_t>(baseIndex + n3 - 1));
        
        // Calculate face normal
        gp_Pnt p1 = nodes(n1).Transformed(transformation);
        gp_Pnt p2 = nodes(n2).Transformed(transformation);
        gp_Pnt p3 = nodes(n3).Transformed(transformation);
        
        gp_Vec normal = calculateNormal(p1, p2, p3);
        
        // Store normal for each vertex of the triangle
        for (int j = 0; j < 3; j++) {
            meshData.normals.push_back(static_cast<float>(normal.X()));
            meshData.normals.push_back(static_cast<float>(normal.Y()));
            meshData.normals.push_back(static_cast<float>(normal.Z()));
        }
    }
}
```

## üåê HTTP API Server

### REST Endpoint Implementation
```cpp
// In cad_controller.cpp
void CADController::handleCreateModel(const httplib::Request& req, httplib::Response& res) {
    try {
        // Parse JSON request
        Json::Value requestJson;
        if (!parseJsonRequest(req, requestJson)) {
            sendErrorResponse(res, 400, "INVALID_JSON", "Failed to parse JSON request");
            return;
        }
        
        // Validate required fields
        if (!requestJson.isMember("operation") || !requestJson.isMember("parameters")) {
            sendErrorResponse(res, 400, "MISSING_FIELDS", "Missing required fields: operation, parameters");
            return;
        }
        
        std::string operation = requestJson["operation"].asString();
        Json::Value parameters = requestJson["parameters"];
        
        if (operation == "create_model") {
            handleCreatePrimitive(parameters, res);
        } else if (operation == "boolean_operation") {
            handleBooleanOperation(parameters, res);
        } else {
            sendErrorResponse(res, 400, "UNKNOWN_OPERATION", "Unknown operation: " + operation);
        }
        
    } catch (const std::exception& e) {
        sendErrorResponse(res, 500, "INTERNAL_ERROR", e.what());
    }
}

void CADController::handleCreatePrimitive(const Json::Value& parameters, httplib::Response& res) {
    try {
        if (!parameters.isMember("type") || parameters["type"].asString() != "primitive") {
            sendErrorResponse(res, 400, "INVALID_TYPE", "Expected type 'primitive'");
            return;
        }
        
        std::string primitiveType = parameters["primitive_type"].asString();
        std::string modelId;
        
        OCCTEngine& engine = OCCTEngine::getInstance();
        
        if (primitiveType == "box") {
            if (!validateBoxParameters(parameters)) {
                sendErrorResponse(res, 400, "INVALID_PARAMETERS", "Invalid box parameters");
                return;
            }
            
            double width = parameters["dimensions"]["width"].asDouble();
            double height = parameters["dimensions"]["height"].asDouble();
            double depth = parameters["dimensions"]["depth"].asDouble();
            
            gp_Pnt position(0, 0, 0);
            if (parameters.isMember("position")) {
                position = gp_Pnt(
                    parameters["position"]["x"].asDouble(),
                    parameters["position"]["y"].asDouble(),
                    parameters["position"]["z"].asDouble()
                );
            }
            
            modelId = engine.createBox(width, height, depth, position);
            
        } else if (primitiveType == "cylinder") {
            // Similar implementation for cylinder
            double radius = parameters["dimensions"]["radius"].asDouble();
            double height = parameters["dimensions"]["height"].asDouble();
            modelId = engine.createCylinder(radius, height);
            
        } else {
            sendErrorResponse(res, 400, "UNKNOWN_PRIMITIVE", "Unknown primitive type: " + primitiveType);
            return;
        }
        
        // Generate tessellation for client
        TessellationEngine tessellator;
        auto meshData = tessellator.tessellateShape(engine.getShape(modelId));
        
        // Create success response
        Json::Value response;
        response["model_id"] = modelId;
        response["status"] = "success";
        response["operation"] = "create_model";
        
        // Add geometry info
        Bnd_Box bbox = engine.getBoundingBox(modelId);
        response["geometry"]["bounding_box"]["min"]["x"] = bbox.CornerMin().X();
        response["geometry"]["bounding_box"]["min"]["y"] = bbox.CornerMin().Y();
        response["geometry"]["bounding_box"]["min"]["z"] = bbox.CornerMin().Z();
        response["geometry"]["bounding_box"]["max"]["x"] = bbox.CornerMax().X();
        response["geometry"]["bounding_box"]["max"]["y"] = bbox.CornerMax().Y();
        response["geometry"]["bounding_box"]["max"]["z"] = bbox.CornerMax().Z();
        
        response["geometry"]["volume"] = engine.getVolume(modelId);
        response["geometry"]["surface_area"] = engine.getSurfaceArea(modelId);
        
        // Add mesh data for client rendering
        Json::Value meshJson;
        for (size_t i = 0; i < meshData.vertices.size(); i++) {
            meshJson["vertices"][static_cast<int>(i)] = meshData.vertices[i];
        }
        for (size_t i = 0; i < meshData.faces.size(); i++) {
            meshJson["faces"][static_cast<int>(i)] = meshData.faces[i];
        }
        for (size_t i = 0; i < meshData.normals.size(); i++) {
            meshJson["normals"][static_cast<int>(i)] = meshData.normals[i];
        }
        response["mesh_data"] = meshJson;
        
        response["created_at"] = getCurrentTimestamp();
        
        sendJsonResponse(res, 201, response);
        
    } catch (const std::exception& e) {
        sendErrorResponse(res, 500, "GEOMETRY_ERROR", e.what());
    }
}
```

## üì¶ Session Management

### Multi-User Session Handling
```cpp
// In session_manager.h
class SessionManager {
private:
    static SessionManager* instance;
    std::map<std::string, Session> sessions;
    std::mutex sessionsMutex;
    
    struct Session {
        std::string sessionId;
        std::string userId;
        std::chrono::system_clock::time_point createdAt;
        std::chrono::system_clock::time_point lastActivity;
        std::chrono::minutes timeout;
        std::map<std::string, std::string> models;  // modelId -> shapeId
        Json::Value preferences;
        
        bool isExpired() const {
            auto now = std::chrono::system_clock::now();
            return (now - lastActivity) > timeout;
        }
        
        void updateActivity() {
            lastActivity = std::chrono::system_clock::now();
        }
    };

public:
    static SessionManager& getInstance();
    
    // Session lifecycle
    std::string createSession(const std::string& userId = "", 
                             const Json::Value& preferences = Json::Value());
    bool hasSession(const std::string& sessionId);
    bool isSessionValid(const std::string& sessionId);
    bool deleteSession(const std::string& sessionId);
    void cleanupExpiredSessions();
    
    // Session operations
    bool addModelToSession(const std::string& sessionId, const std::string& modelId, 
                          const std::string& shapeId);
    bool removeModelFromSession(const std::string& sessionId, const std::string& modelId);
    std::vector<std::string> getSessionModels(const std::string& sessionId);
    
    // Session info
    Json::Value getSessionInfo(const std::string& sessionId);
    void updateSessionActivity(const std::string& sessionId);
    
private:
    std::string generateSessionId() const;
    void startCleanupThread();
};
```

## üîß Error Handling Patterns

### OCCT Exception Handling
```cpp
// Robust error handling for OCCT operations
template<typename Func>
auto safeOCCTOperation(Func&& operation, const std::string& operationName) -> decltype(operation()) {
    try {
        return operation();
    } catch (const Standard_Failure& e) {
        std::string message = "OCCT error in " + operationName + ": " + std::string(e.GetMessageString());
        throw std::runtime_error(message);
    } catch (const Standard_OutOfRange& e) {
        std::string message = "OCCT range error in " + operationName + ": " + std::string(e.GetMessageString());
        throw std::out_of_range(message);
    } catch (const Standard_NullObject& e) {
        std::string message = "OCCT null object error in " + operationName + ": " + std::string(e.GetMessageString());
        throw std::invalid_argument(message);
    } catch (...) {
        throw std::runtime_error("Unknown OCCT error in " + operationName);
    }
}

// Usage example
std::string OCCTEngine::createBox(double width, double height, double depth, const gp_Pnt& position) {
    return safeOCCTOperation([&]() {
        BRepPrimAPI_MakeBox boxMaker(width, height, depth);
        boxMaker.Build();
        
        if (!boxMaker.IsDone()) {
            throw std::runtime_error("Failed to create box geometry");
        }
        
        return processNewShape(boxMaker.Shape(), position);
    }, "createBox");
}
```

## üöÄ Performance Optimization

### Memory Management
```cpp
// RAII pattern for OCCT handles
class OCCTShapeGuard {
private:
    TopoDS_Shape shape;
    std::string shapeId;
    bool released;

public:
    OCCTShapeGuard(const TopoDS_Shape& s, const std::string& id) 
        : shape(s), shapeId(id), released(false) {}
    
    ~OCCTShapeGuard() {
        if (!released) {
            cleanup();
        }
    }
    
    TopoDS_Shape release() {
        released = true;
        return shape;
    }
    
private:
    void cleanup() {
        // Perform any necessary cleanup
        shape.Nullify();
    }
};
```

### Parallel Tessellation
```cpp
// Parallel tessellation for complex shapes
class ParallelTessellator {
public:
    static MeshData tessellateInParallel(const TopoDS_Shape& shape, double quality) {
        std::vector<TopoDS_Face> faces;
        
        // Collect all faces
        for (TopExp_Explorer explorer(shape, TopAbs_FACE); explorer.More(); explorer.Next()) {
            faces.push_back(TopoDS::Face(explorer.Current()));
        }
        
        // Parallel tessellation
        std::vector<std::future<MeshData>> futures;
        for (const auto& face : faces) {
            futures.push_back(std::async(std::launch::async, [&face, quality]() {
                return tessellateFace(face, quality);
            }));
        }
        
        // Combine results
        MeshData combinedMesh;
        for (auto& future : futures) {
            MeshData faceMesh = future.get();
            combineMeshData(combinedMesh, faceMesh);
        }
        
        return combinedMesh;
    }
    
private:
    static MeshData tessellateFace(const TopoDS_Face& face, double quality);
    static void combineMeshData(MeshData& target, const MeshData& source);
};
```

## üîß Build Integration

### CMake Configuration
```cmake
# In CMakeLists.txt - OCCT integration
find_package(OpenCASCADE REQUIRED)

if(OpenCASCADE_FOUND)
    message(STATUS "OpenCASCADE found at: ${OpenCASCADE_INCLUDE_DIR}")
    message(STATUS "OpenCASCADE libraries: ${OpenCASCADE_LIBRARIES}")
    
    target_include_directories(${PROJECT_NAME} PRIVATE ${OpenCASCADE_INCLUDE_DIR})
    target_link_libraries(${PROJECT_NAME} PRIVATE ${OpenCASCADE_LIBRARIES})
    
    # Required OCCT modules
    target_link_libraries(${PROJECT_NAME} PRIVATE
        TKernel TKMath TKBRep TKGeomBase TKGeomAlgo TKG3d TKG2d
        TKShHealing TKTopAlgo TKMesh TKPrim TKBool TKBO
        TKFillet TKSTEP TKSTEPBase TKSTEPAttr TKSTEP209 TKSTL
        TKIGES TKXSBase TKXCAF TKLCAF TKV3d
    )
else()
    message(FATAL_ERROR "OpenCASCADE not found. Please install OCCT development package.")
endif()

# Compiler settings for OCCT
if(MSVC)
    target_compile_definitions(${PROJECT_NAME} PRIVATE
        _CRT_SECURE_NO_WARNINGS
        NOMINMAX
    )
endif()
```

This comprehensive guide ensures robust, professional OCCT development with proper error handling, performance optimization, and integration with the Three.js frontend.

