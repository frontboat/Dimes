---
description: Project Structure Guidelines
globs: 
alwaysApply: false
---
# Project Structure Guidelines

## 📁 Directory Organization

The CAD Engine follows a clean separation between client and server with shared type definitions.

```
Dimes/                          # Root project directory
├── .cursor/                    # Cursor IDE configuration
│   └── rules/                  # Development rules and guidelines
├── client/                     # Three.js TypeScript frontend
│   ├── public/                 # Static assets and favicon
│   ├── src/                    # Source code
│   │   ├── api/                # Server communication layer
│   │   ├── controls/           # Camera and viewport controls
│   │   ├── mesh/               # Geometry processing
│   │   ├── renderer/           # Three.js 3D rendering
│   │   ├── types/              # TypeScript type definitions
│   │   └── main.ts             # Application entry point
│   ├── index.html              # Main HTML template
│   ├── package.json            # Node.js dependencies
│   ├── tsconfig.json           # TypeScript configuration
│   └── vite.config.ts          # Build tool configuration
├── server/                     # OCCT C++ backend
│   ├── include/                # Header files (.h)
│   │   ├── api/                # REST API server headers
│   │   ├── export/             # File export functionality
│   │   ├── geometry/           # OCCT geometry operations
│   │   ├── session/            # Session management
│   │   ├── tessellation/       # Mesh generation
│   │   ├── httplib.h           # HTTP server library
│   │   └── json/               # JSON processing
│   ├── src/                    # Implementation files (.cpp)
│   │   ├── api/                # REST API implementation
│   │   ├── export/             # Export functionality
│   │   ├── geometry/           # OCCT operations
│   │   ├── session/            # Session handling
│   │   └── tessellation/       # Tessellation implementation
│   ├── build/                  # CMake build directory
│   └── CMakeLists.txt          # Build configuration
├── shared/                     # Shared type definitions
│   └── types/                  # Common data structures
├── Docs/                       # Documentation and guides
├── .gitignore                  # Git exclusions
├── README.md                   # Project overview and setup
└── LICENSE                     # Project license
```

## 🎯 Client Structure ([client/](mdc:client))

### Core Application Files
- **[main.ts](mdc:client/src/main.ts)**: Application entry point and orchestrator
- **[index.html](mdc:client/index.html)**: Main HTML template with Three.js viewport

### API Communication ([client/src/api/](mdc:client/src/api))
- **[cad-client.ts](mdc:client/src/api/cad-client.ts)**: Server communication layer
  - REST API calls for CRUD operations
  - WebSocket handling for real-time updates
  - Connection state management

### 3D Rendering ([client/src/renderer/](mdc:client/src/renderer))
- **[cad-renderer.ts](mdc:client/src/renderer/cad-renderer.ts)**: Three.js scene management
  - Scene setup with professional lighting
  - Material and shader management
  - Grid, axes, and visual aids
  - Responsive viewport handling

### User Controls ([client/src/controls/](mdc:client/src/controls))
- **[cad-controls.ts](mdc:client/src/controls/cad-controls.ts)**: Camera and interaction
  - OrbitControls for 3D navigation
  - Keyboard shortcuts (Ctrl+1/2/3/0)
  - View presets with smooth transitions
  - Mouse interaction handling

### Geometry Processing ([client/src/mesh/](mdc:client/src/mesh))
- **[mesh-manager.ts](mdc:client/src/mesh/mesh-manager.ts)**: Mesh operations
  - Three.js geometry creation from server data
  - Mesh optimization and Level of Detail
  - Material assignment and updates

### Type Definitions ([client/src/types/](mdc:client/src/types))
- **cad-types.ts**: Core CAD interfaces
- **mesh-types.ts**: Geometry and mesh data structures
- **api-types.ts**: API request/response types

### Configuration Files
- **[package.json](mdc:client/package.json)**: Dependencies and scripts
- **[tsconfig.json](mdc:client/tsconfig.json)**: TypeScript compiler options
- **[vite.config.ts](mdc:client/vite.config.ts)**: Build tool configuration

## 🛠️ Server Structure ([server/](mdc:server))

### Header Files ([server/include/](mdc:server/include))

#### API Layer ([server/include/api/](mdc:server/include/api))
- **[cad_controller.h](mdc:server/include/api/cad_controller.h)**: HTTP server class
  - REST endpoint declarations
  - Request/response handling
  - CORS and middleware

#### Geometry Engine ([server/include/geometry/](mdc:server/include/geometry))
- **[occt_engine.h](mdc:server/include/geometry/occt_engine.h)**: OCCT operations
  - Primitive creation (box, cylinder, sphere, cone)
  - Boolean operations (union, cut, intersection)
  - Shape transformations and analysis

#### Session Management ([server/include/session/](mdc:server/include/session))
- **[session_manager.h](mdc:server/include/session/session_manager.h)**: Multi-user sessions
  - Session lifecycle and state
  - User isolation and resource management
  - Cleanup and timeout handling

#### Tessellation ([server/include/tessellation/](mdc:server/include/tessellation))
- **[tessellation_engine.h](mdc:server/include/tessellation/tessellation_engine.h)**: Mesh generation
  - High-quality triangle mesh creation
  - Configurable quality settings
  - Normal calculation and optimization

#### Export Functionality ([server/include/export/](mdc:server/include/export))
- **export_engine.h**: File format exports
  - STEP, STL, OBJ, IGES support
  - Format-specific options
  - Binary and text output

#### External Libraries
- **[httplib.h](mdc:server/include/httplib.h)**: HTTP server implementation
- **[json/json.h](mdc:server/include/json/json.h)**: JSON processing

### Implementation Files ([server/src/](mdc:server/src))

#### API Implementation ([server/src/api/](mdc:server/src/api))
- **[cad_controller.cpp](mdc:server/src/api/cad_controller.cpp)**: HTTP server logic
  - Endpoint implementations
  - Request parsing and validation
  - Response formatting and error handling

#### Geometry Implementation ([server/src/geometry/](mdc:server/src/geometry))
- **[occt_engine.cpp](mdc:server/src/geometry/occt_engine.cpp)**: OCCT operations
  - Primitive creation algorithms
  - Boolean operation implementations
  - Shape analysis and measurements

#### Session Implementation ([server/src/session/](mdc:server/src/session))
- **[session_manager.cpp](mdc:server/src/session/session_manager.cpp)**: Session logic
  - Session creation and deletion
  - State tracking and persistence
  - Resource cleanup and memory management

#### Tessellation Implementation ([server/src/tessellation/](mdc:server/src/tessellation))
- **[tessellation_engine.cpp](mdc:server/src/tessellation/tessellation_engine.cpp)**: Mesh generation
  - OCCT triangulation processing
  - Vertex and normal calculation
  - Quality control and optimization

### Build Configuration
- **[CMakeLists.txt](mdc:server/CMakeLists.txt)**: CMake build setup
  - OpenCASCADE library detection
  - Compiler flags and dependencies
  - Build targets and installation

## 🔗 Shared Resources ([shared/](mdc:shared))

### Type Definitions ([shared/types/](mdc:shared/types))
- **common-types.ts**: Interfaces used by both client and server
- **geometry-types.ts**: Geometric data structures
- **session-types.ts**: Session and user management types

## 📚 Documentation ([Docs/](mdc:Docs))

### Project Documentation
- Architecture diagrams and design documents
- API documentation and examples
- Development guides and tutorials
- Deployment and configuration guides

## 🎯 File Naming Conventions

### TypeScript Files (Client)
- **kebab-case**: `cad-renderer.ts`, `mesh-manager.ts`
- **Descriptive names**: Clear indication of functionality
- **Component grouping**: Related files in same directory

### C++ Files (Server)
- **snake_case**: `occt_engine.cpp`, `session_manager.h`
- **Header/Implementation pairs**: `.h` and `.cpp` files match
- **Namespace prefixing**: Avoid global namespace pollution

### Configuration Files
- **Standard names**: `package.json`, `CMakeLists.txt`, `tsconfig.json`
- **Dot-prefixed**: Configuration files like `.gitignore`

## 🔧 Development Workflow

### Adding New Features

#### Client-Side Feature
1. **Types first**: Add interfaces to `src/types/`
2. **Implementation**: Create component in appropriate directory
3. **Integration**: Update [main.ts](mdc:client/src/main.ts) if needed
4. **Testing**: Test in browser with hot reload

#### Server-Side Feature
1. **Header first**: Add declarations to appropriate `include/` directory
2. **Implementation**: Add corresponding `.cpp` file in `src/`
3. **CMake integration**: Update [CMakeLists.txt](mdc:server/CMakeLists.txt) if needed
4. **API endpoint**: Add REST endpoint if client-facing

### Code Organization Principles

#### Separation of Concerns
- **Client**: UI, rendering, user interaction
- **Server**: Geometry computation, business logic, data persistence
- **Shared**: Common data structures and interfaces

#### Dependency Management
- **Client**: NPM packages in `package.json`
- **Server**: System libraries detected by CMake
- **External**: Third-party libraries in appropriate include directories

#### Configuration Centralization
- **Client config**: Vite, TypeScript, package.json
- **Server config**: CMake, compiler flags, library paths
- **IDE config**: Cursor rules in `.cursor/rules/`

## 🚨 Anti-Patterns to Avoid

### Don't Mix Concerns
```bash
# ❌ Wrong: Client code in server directory
server/src/three-js-helper.cpp

# ✅ Correct: Client code in client directory
client/src/renderer/three-js-helper.ts
```

### Don't Skip Type Definitions
```bash
# ❌ Wrong: Implementation without types
client/src/new-feature.ts

# ✅ Correct: Types first, then implementation
client/src/types/new-feature-types.ts
client/src/new-feature/new-feature.ts
```

### Don't Bypass Directory Structure
```bash
# ❌ Wrong: Random file placement
server/utils.cpp
client/helper.ts

# ✅ Correct: Organized by function
server/src/geometry/shape_utils.cpp
client/src/api/connection-helper.ts
```

## 📦 Build Output Organization

### Client Build Output
```
client/dist/
├── index.html              # Entry point
├── assets/
│   ├── index-[hash].js     # Application bundle
│   ├── index-[hash].css    # Styles
│   └── vendor-[hash].js    # Third-party libraries
└── favicon.ico
```

### Server Build Output
```
server/build/
├── Release/                # Release build
│   └── cad-engine-server   # Executable
├── Debug/                  # Debug build
│   └── cad-engine-server   # Debug executable
└── CMakeFiles/            # Build artifacts
```

This structure ensures maintainability, scalability, and clear separation of concerns while supporting professional CAD development workflows.

