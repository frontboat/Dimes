---
description: API Design Guidelines
globs: 
alwaysApply: false
---
# API Design Guidelines

## üéØ API Design Principles

The CAD Engine REST API follows RESTful principles and modern API design standards for professional CAD operations.

## üì° Base Configuration

### Endpoints Base
- **Development**: `http://localhost:8080/api/v1`
- **Production**: `https://your-domain.com/api/v1`

### Headers
```http
Content-Type: application/json
Accept: application/json
X-Session-ID: {session_id}  # Optional for session-specific operations
```

### CORS Policy
```cpp
// In cad_controller.cpp
res.set_header("Access-Control-Allow-Origin", "*");  // Development
res.set_header("Access-Control-Allow-Origin", "https://your-domain.com");  // Production
res.set_header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS");
res.set_header("Access-Control-Allow-Headers", "Content-Type, X-Session-ID");
```

## üõ†Ô∏è Core Endpoints

### 1. Health Check
```http
GET /api/v1/health
```

**Response:**
```json
{
  "status": "healthy",
  "server": "CAD Engine v1.0.0",
  "occt_version": "7.7.0",
  "timestamp": "2024-01-01T12:00:00Z",
  "uptime_seconds": 3600
}
```

### 2. Session Management

#### Create Session
```http
POST /api/v1/sessions
```

**Request:**
```json
{
  "user_id": "optional-user-identifier",
  "preferences": {
    "units": "mm",
    "precision": 0.1
  }
}
```

**Response:**
```json
{
  "session_id": "session_abc123",
  "created_at": "2024-01-01T12:00:00Z",
  "expires_at": "2024-01-01T16:00:00Z"
}
```

### 3. Model Operations

#### Create Model
```http
POST /api/v1/models
```

**Request (Primitive):**
```json
{
  "session_id": "session_abc123",
  "operation": "create_model",
  "parameters": {
    "type": "primitive",
    "primitive_type": "box",
    "dimensions": {
      "width": 10.0,
      "height": 5.0,
      "depth": 2.0
    },
    "position": {
      "x": 0.0,
      "y": 0.0,
      "z": 0.0
    }
  }
}
```

**Request (Boolean Operation):**
```json
{
  "session_id": "session_abc123",
  "operation": "boolean_operation",
  "parameters": {
    "type": "union",
    "operand_a": "model_123",
    "operand_b": "model_456"
  }
}
```

**Response:**
```json
{
  "model_id": "model_789",
  "operation": "create_model",
  "status": "success",
  "geometry": {
    "bounding_box": {
      "min": {"x": -5.0, "y": -2.5, "z": -1.0},
      "max": {"x": 5.0, "y": 2.5, "z": 1.0}
    },
    "volume": 100.0,
    "surface_area": 140.0
  },
  "created_at": "2024-01-01T12:00:00Z"
}
```

#### Get Model
```http
GET /api/v1/models/{model_id}
```

**Response:**
```json
{
  "model_id": "model_789",
  "session_id": "session_abc123",
  "parameters": {
    "type": "primitive",
    "primitive_type": "box",
    "dimensions": {"width": 10.0, "height": 5.0, "depth": 2.0}
  },
  "geometry": {
    "bounding_box": {
      "min": {"x": -5.0, "y": -2.5, "z": -1.0},
      "max": {"x": 5.0, "y": 2.5, "z": 1.0}
    },
    "volume": 100.0,
    "surface_area": 140.0
  },
  "mesh_data": {
    "vertices": [/* array of vertex positions */],
    "faces": [/* array of triangle indices */],
    "normals": [/* array of vertex normals */]
  },
  "created_at": "2024-01-01T12:00:00Z",
  "updated_at": "2024-01-01T12:00:00Z"
}
```

#### Update Model Parameters
```http
PUT /api/v1/models/{model_id}
```

**Request:**
```json
{
  "session_id": "session_abc123",
  "parameters": {
    "dimensions": {
      "width": 15.0,
      "height": 5.0,
      "depth": 2.0
    }
  }
}
```

**Response:**
```json
{
  "model_id": "model_789",
  "status": "updated",
  "geometry": {
    "bounding_box": {
      "min": {"x": -7.5, "y": -2.5, "z": -1.0},
      "max": {"x": 7.5, "y": 2.5, "z": 1.0}
    },
    "volume": 150.0,
    "surface_area": 190.0
  },
  "updated_at": "2024-01-01T12:05:00Z"
}
```

#### Delete Model
```http
DELETE /api/v1/models/{model_id}
```

**Response:**
```json
{
  "model_id": "model_789",
  "status": "deleted",
  "deleted_at": "2024-01-01T12:10:00Z"
}
```

### 4. Export Operations

#### Export Model
```http
POST /api/v1/models/{model_id}/export
```

**Request:**
```json
{
  "session_id": "session_abc123",
  "format": "step",
  "options": {
    "units": "mm",
    "precision": 0.01
  }
}
```

**Response:**
```json
{
  "export_id": "export_def456",
  "model_id": "model_789",
  "format": "step",
  "status": "completed",
  "download_url": "/api/v1/exports/export_def456/download",
  "file_size": 1024,
  "created_at": "2024-01-01T12:15:00Z"
}
```

#### Download Export
```http
GET /api/v1/exports/{export_id}/download
```

**Response:** Binary file data with appropriate Content-Type header.

## üéØ Implementation Guidelines

### Error Handling

#### HTTP Status Codes
- **200 OK**: Successful operation
- **201 Created**: Resource created successfully
- **400 Bad Request**: Invalid request parameters
- **404 Not Found**: Resource not found
- **409 Conflict**: Resource conflict (e.g., duplicate names)
- **500 Internal Server Error**: Server-side error

#### Error Response Format
```json
{
  "error": {
    "code": "INVALID_PARAMETERS",
    "message": "Box dimensions must be positive values",
    "details": {
      "field": "dimensions.width",
      "value": -5.0,
      "constraint": "must be > 0"
    },
    "timestamp": "2024-01-01T12:00:00Z"
  }
}
```

### Validation Rules

#### Parameter Validation
```cpp
// In cad_controller.cpp
bool validateBoxDimensions(const Json::Value& dimensions) {
    if (!dimensions.isMember("width") || !dimensions.isMember("height") || !dimensions.isMember("depth")) {
        return false;
    }
    
    double width = dimensions["width"].asDouble();
    double height = dimensions["height"].asDouble();
    double depth = dimensions["depth"].asDouble();
    
    return width > 0 && height > 0 && depth > 0;
}
```

#### Session Validation
```cpp
bool validateSession(const std::string& sessionId) {
    return sessionManager.hasSession(sessionId) && !sessionManager.isExpired(sessionId);
}
```

### Response Formatting

#### Consistent JSON Structure
```cpp
// Success response helper
Json::Value createSuccessResponse(const std::string& operation, const Json::Value& data) {
    Json::Value response;
    response["status"] = "success";
    response["operation"] = operation;
    response["data"] = data;
    response["timestamp"] = getCurrentTimestamp();
    return response;
}

// Error response helper  
Json::Value createErrorResponse(const std::string& code, const std::string& message) {
    Json::Value response;
    response["error"]["code"] = code;
    response["error"]["message"] = message;
    response["error"]["timestamp"] = getCurrentTimestamp();
    return response;
}
```

## üîß Server Implementation

### Route Registration
```cpp
// In cad_controller.cpp
void CADController::setupRoutes() {
    // Health check
    server.Get("/api/v1/health", [this](mdc:const httplib::Request&, httplib::Response& res) {
        handleHealthCheck(res);
    });
    
    // Session management
    server.Post("/api/v1/sessions", [this](mdc:const httplib::Request& req, httplib::Response& res) {
        handleCreateSession(req, res);
    });
    
    // Model operations
    server.Post("/api/v1/models", [this](mdc:const httplib::Request& req, httplib::Response& res) {
        handleCreateModel(req, res);
    });
    
    server.Get(R"(/api/v1/models/(\w+))", [this](mdc:const httplib::Request& req, httplib::Response& res) {
        handleGetModel(req, res);
    });
    
    server.Put(R"(/api/v1/models/(\w+))", [this](mdc:const httplib::Request& req, httplib::Response& res) {
        handleUpdateModel(req, res);
    });
    
    server.Delete(R"(/api/v1/models/(\w+))", [this](mdc:const httplib::Request& req, httplib::Response& res) {
        handleDeleteModel(req, res);
    });
}
```

### Request Parsing
```cpp
bool CADController::parseJsonRequest(const httplib::Request& req, Json::Value& json) {
    try {
        Json::CharReaderBuilder builder;
        std::unique_ptr<Json::CharReader> reader(builder.newCharReader());
        std::string errors;
        
        if (!reader->parse(req.body.c_str(), req.body.c_str() + req.body.length(), &json, &errors)) {
            return false;
        }
        return true;
    } catch (const std::exception&) {
        return false;
    }
}
```

## üîç Testing API Endpoints

### Automated Testing
```bash
# Health check
curl -X GET http://localhost:8080/api/v1/health

# Create session
curl -X POST http://localhost:8080/api/v1/sessions \
  -H "Content-Type: application/json" \
  -d '{"user_id": "test-user"}'

# Create box model
curl -X POST http://localhost:8080/api/v1/models \
  -H "Content-Type: application/json" \
  -d '{
    "session_id": "session_abc123",
    "operation": "create_model",
    "parameters": {
      "type": "primitive",
      "primitive_type": "box",
      "dimensions": {"width": 10, "height": 5, "depth": 2}
    }
  }'
```

### Integration with Client
The [CADClient](mdc:client/src/api/cad-client.ts) implements these API calls:

```typescript
// Create model example
const response = await cadClient.createModel({
  operation: 'create_model',
  parameters: {
    type: 'primitive',
    primitive_type: 'box',
    dimensions: { width: 10, height: 5, depth: 2 }
  }
});
```

This API design ensures consistency, type safety, and professional CAD operation standards while maintaining compatibility with the Three.js frontend.

