---
description: API Design Guidelines
globs: 
alwaysApply: false
---
# API Design Guidelines

## REST API Architecture

### Base API Structure
All endpoints should follow RESTful conventions with consistent patterns:

```
Base URL: http://localhost:8080/api/v1
Authentication: Session-based (for now)
Content-Type: application/json
```

### Core Endpoints

#### Model Operations
```
POST   /api/v1/sessions/{session_id}/models          # Create new model
PUT    /api/v1/sessions/{session_id}/models/{model_id} # Update existing model
GET    /api/v1/sessions/{session_id}/models          # List models in session
DELETE /api/v1/sessions/{session_id}/models/{model_id} # Delete model
```

#### Parametric Operations
```
PUT    /api/v1/sessions/{session_id}/parameters      # Update parameters
GET    /api/v1/sessions/{session_id}/parameters      # Get current parameters
POST   /api/v1/sessions/{session_id}/operations      # Perform operations (boolean, fillet, etc.)
```

#### Export Operations
```
GET    /api/v1/sessions/{session_id}/export/{format} # Export model (STEP, STL, etc.)
POST   /api/v1/sessions/{session_id}/tessellate      # Get mesh data for Three.js
```

## Request/Response Schemas

### Standard Request Format
Define request schemas in [shared/types/api-types.ts](mdc:shared/types/api-types.ts):

```typescript
interface CADRequest {
    session_id: string;
    operation: OperationType;
    parameters?: Record<string, any>;
    options?: OperationOptions;
}

interface ModelCreateRequest extends CADRequest {
    operation: 'create_model';
    parameters: {
        type: 'primitive' | 'sketch' | 'imported';
        primitive_type?: 'box' | 'cylinder' | 'sphere' | 'cone';
        dimensions?: Record<string, number>;
        position?: [number, number, number];
        rotation?: [number, number, number];
    };
}

interface ParameterUpdateRequest extends CADRequest {
    operation: 'update_parameters';
    parameters: Record<string, number>;
}

interface BooleanOperationRequest extends CADRequest {
    operation: 'boolean_operation';
    parameters: {
        operation_type: 'union' | 'cut' | 'intersect';
        target_id: string;
        tool_id: string;
    };
}
```

### Standard Response Format
```typescript
interface CADResponse {
    success: boolean;
    session_id: string;
    timestamp: string;
    data?: any;
    error?: {
        code: string;
        message: string;
        details?: Record<string, any>;
    };
    performance?: {
        processing_time_ms: number;
        geometry_complexity: number;
    };
}

interface ModelResponse extends CADResponse {
    data: {
        model_id: string;
        mesh_data?: MeshData;
        bounding_box: BoundingBox;
        file_urls?: Record<string, string>; // format -> download URL
    };
}

interface MeshData {
    vertices: number[];      // Flat array: [x1,y1,z1, x2,y2,z2, ...]
    faces: number[];         // Triangle indices: [i1,i2,i3, i4,i5,i6, ...]
    normals?: number[];      // Vertex normals (optional)
    colors?: number[];       // Vertex colors (optional)
    metadata: {
        vertex_count: number;
        face_count: number;
        tessellation_quality: number;
    };
}
```

## Daydreams Integration Pattern

### Compatible Endpoint for Existing System
Create a Daydreams-compatible endpoint to replace OpenSCAD:

```typescript
// POST /api/v1/daydreams/cad
interface DaydreamsCADRequest {
    sessionId: string;
    instruction: string;  // Natural language instruction
    parameters?: Record<string, any>;
}

interface DaydreamsCADResponse {
    success: boolean;
    script?: string;      // For backward compatibility (can be empty)
    status: 'idle' | 'processing' | 'error';
    message: string;
    errorMessage?: string;
    // New CAD-specific fields
    model_data?: {
        mesh: MeshData;
        files: Record<string, string>;
        parameters: Record<string, number>;
    };
}
```

### Migration Path
The endpoint at [server/src/api/daydreams_controller.cpp](mdc:server/src/api/daydreams_controller.cpp) should:

1. Parse natural language instructions
2. Convert to CAD operations
3. Execute using OCCT engine
4. Return compatible response format
5. Maintain session state

## Error Handling Standards

### Error Code Categories
```typescript
enum ErrorCategory {
    VALIDATION = 'VALIDATION',    // Input validation errors
    GEOMETRY = 'GEOMETRY',        // OCCT geometry errors
    SYSTEM = 'SYSTEM',            // System/resource errors
    SESSION = 'SESSION',          // Session management errors
}

interface ErrorResponse {
    success: false;
    error: {
        category: ErrorCategory;
        code: string;
        message: string;
        details?: {
            field?: string;           // For validation errors
            occt_error?: string;      // For OCCT-specific errors
            suggestions?: string[];   // Helpful suggestions
        };
    };
}
```

### Common Error Codes
```typescript
const ERROR_CODES = {
    // Validation errors
    'VALIDATION_001': 'Missing required parameter',
    'VALIDATION_002': 'Invalid parameter type',
    'VALIDATION_003': 'Parameter out of range',
    
    // Geometry errors
    'GEOMETRY_001': 'Invalid geometry operation',
    'GEOMETRY_002': 'Boolean operation failed',
    'GEOMETRY_003': 'Tessellation failed',
    
    // System errors
    'SYSTEM_001': 'OCCT initialization failed',
    'SYSTEM_002': 'Memory allocation failed',
    'SYSTEM_003': 'File export failed',
    
    // Session errors
    'SESSION_001': 'Session not found',
    'SESSION_002': 'Session expired',
    'SESSION_003': 'Session limit exceeded',
} as const;
```

## WebSocket Real-time Updates

### WebSocket Protocol
For real-time parametric updates:

```typescript
// WebSocket connection: ws://localhost:8080/ws/{session_id}

interface WebSocketMessage {
    type: MessageType;
    session_id: string;
    timestamp: string;
    data: any;
}

type MessageType = 
    | 'parameter_update'
    | 'geometry_update'
    | 'operation_complete'
    | 'error'
    | 'session_status';

// Client -> Server
interface ParameterUpdateMessage extends WebSocketMessage {
    type: 'parameter_update';
    data: {
        parameter_name: string;
        new_value: number;
        update_id: string; // For tracking
    };
}

// Server -> Client
interface GeometryUpdateMessage extends WebSocketMessage {
    type: 'geometry_update';
    data: {
        update_id: string;
        mesh_delta?: MeshData; // Only changed geometry
        full_mesh?: MeshData;  // Full geometry if needed
        performance_info: {
            update_time_ms: number;
            complexity_score: number;
        };
    };
}
```

## Performance and Caching

### Response Caching Strategy
```typescript
interface CacheHeaders {
    'Cache-Control': string;
    'ETag': string;
    'Last-Modified': string;
}

// Geometry data caching
const CACHE_STRATEGIES = {
    mesh_data: {
        ttl: 300, // 5 minutes
        invalidate_on: ['parameter_change', 'geometry_operation']
    },
    export_files: {
        ttl: 3600, // 1 hour
        invalidate_on: ['model_change']
    },
    session_state: {
        ttl: 1800, // 30 minutes
        invalidate_on: ['session_timeout']
    }
};
```

### Rate Limiting
```typescript
interface RateLimit {
    window_ms: number;
    max_requests: number;
    per_session?: boolean;
}

const RATE_LIMITS = {
    parameter_updates: { window_ms: 1000, max_requests: 10, per_session: true },
    geometry_operations: { window_ms: 5000, max_requests: 5, per_session: true },
    export_requests: { window_ms: 60000, max_requests: 10, per_session: true },
};
```

## Security Considerations

### Input Validation
All API endpoints should validate input according to schemas defined in [shared/types/validation.ts](mdc:shared/types/validation.ts):

```typescript
import { z } from 'zod';

const ParameterSchema = z.object({
    name: z.string().min(1).max(50).regex(/^[a-zA-Z][a-zA-Z0-9_]*$/),
    value: z.number().finite().min(-1000).max(1000),
});

const GeometryOperationSchema = z.object({
    operation: z.enum(['create', 'modify', 'boolean', 'fillet', 'chamfer']),
    parameters: z.record(z.union([z.string(), z.number(), z.boolean()])),
});
```

### Session Security
```typescript
interface SessionSecurity {
    max_session_lifetime: number;    // 24 hours
    max_models_per_session: number;  // 10 models
    max_file_size: number;           // 100MB exports
    allowed_origins: string[];       // CORS origins
}
```

## Documentation Standards

### OpenAPI Specification
Maintain API documentation in [docs/api-spec.yml](mdc:docs/api-spec.yml) using OpenAPI 3.0:

```yaml
openapi: 3.0.0
info:
  title: CAD Engine API
  version: 1.0.0
  description: OpenCASCADE-based parametric modeling API

paths:
  /api/v1/sessions/{session_id}/models:
    post:
      summary: Create new CAD model
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelCreateRequest'
```

### Response Examples
Include comprehensive examples in API documentation:

```json
{
  "success": true,
  "session_id": "user_123_session",
  "timestamp": "2024-01-15T10:30:00Z",
  "data": {
    "model_id": "box_001",
    "mesh_data": {
      "vertices": [0,0,0, 10,0,0, 10,10,0, ...],
      "faces": [0,1,2, 2,3,0, ...],
      "metadata": {
        "vertex_count": 8,
        "face_count": 12,
        "tessellation_quality": 0.1
      }
    },
    "bounding_box": {
      "min": [0, 0, 0],
      "max": [10, 10, 10]
    },
    "file_urls": {
      "step": "/api/v1/files/box_001.step",
      "stl": "/api/v1/files/box_001.stl"
    }
  },
  "performance": {
    "processing_time_ms": 45,
    "geometry_complexity": 8
  }
}
```

